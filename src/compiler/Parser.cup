// ------------  Paquete e importaciones ------------
package compiler;

import java_cup.runtime.*;
import java.util.LinkedList;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code
{:
    public String resultado = "";

    public void syntax_error(Symbol s)
    {
            main.Main.listaErrores.add(new utilities.ErrorClass("Sint치ctico", (String) s.value, s.right, s.left ));
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            main.Main.listaErrores.add(new utilities.ErrorClass("Sint치ctico", (String) s.value, s.right, s.left ));
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:}


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaraci칩n de terminales

terminal String RPROGRAM;
terminal String REND;
terminal String RVAR;
terminal String RRES;
terminal String RSUM;
terminal String RMUL;
terminal String RDIV;
terminal String RMOD;
terminal Strinq RMEDIA;
terminal String RMEDIANA;
terminal String RMODA;
terminal String RVARIANZA;
terminal String RMAX;
terminal String RMIN;
terminal String RPRINT;
terminal String RCONSOLE;
terminal String RCHAR;
terminal String RDOUBLE;
terminal String RARRAY;
terminal String RCOLUMN;
terminal String RGRAPHBAR;
terminal String RGRAPHPIE;
terminal String RGRAPHLINE;
terminal String RHISTOGRAM;
terminal String REXEC;
terminal String RTITULO;
terminal String REJEX;
terminal String REJEY;
terminal String RTITULOX;
terminal String RTITULOY;


terminal String EXCL;
terminal String PARDER;
terminal String PARIZQ;
terminal String PYC;
terminal String CORCHIZQ;
terminal String CORCHDER;
terminal String COMA;
terminal String DOSPUNTOS;


terminal String MENOS;
terminal String IGUAL;
terminal String MENOR;
terminal String MAYOR;




terminal String DOUBLE;
terminal String CADENA;
terminal String ID;
terminal String IDARRAY;


//------> Declaraci칩n de no terminales
non terminal inicio;
non terminal listainstr;
non terminal instruccion, expresion;
non terminal print;
non terminal printlist;
non terminal declararVariable;
non terminal tipoDato;
non terminal declararArreglo;
non terminal listaArray;
non terminal tipoPrint;
non terminal tipoGrafica;
non terminal graficar;
non terminal listaSentenciasBar;
non terminal sentenciasBar;





//------> PRECEDENCIA
//precedence left MAS;
//precedence left POR;

//------> Definir Simbolo Inicial
start with inicio;


// ------------>  Producciones  <------------

inicio ::=  RPROGRAM listainstr REND RPROGRAM
;

listainstr ::= listainstr instruccion
    | instruccion

;

instruccion ::= print
                | declararVariable
                | declararArreglo
                | graficar
                | error PYC
;

graficar ::= tipoGrafica
;

//grafica ::= tipoGrafica EXEC tipoGrafica END END;

//sentencia ::= TITULO "::" CHAR END
// | LABEL "::" CHAR_LIST END
// | VALUES "::" DOUBLE_LIST END;
//
//
//TipoGrafica = pie listasentenciaspie
//   | line listas listasentencia
//
//Listasentencpie= Listasentencpie sentencispie
//| sentenciapie

listaSentenciasBar ::= listaSentenciasBar sentenciasBar
                    | sentenciasBar
;

tipoGrafica ::= RGRAPHBAR PARIZQ listaSentenciasBar REXEC RGRAPHBAR REND PYC PARDER REND PYC {::}
                | RGRAPHPIE
                | RGRAPHLINE
                | RHISTOGRAM
;

sentenciasBar ::= RTITULO DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion:exp REND PYC {::}
                | REJEX DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion:exp REND PYC {::}
                | REJEY DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion:exp REND PYC {::}
                | RTITULOX DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion:exp REND PYC {::}
                | RTITULOY DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion:exp REND PYC {::}

;




print ::=  RCONSOLE DOSPUNTOS DOSPUNTOS tipoPrint REND PYC   {::}

;

tipoPrint ::= RPRINT IGUAL printlist:exp {: utilities.Instruction.print(exp.toString()); :}
            |  RCOLUMN IGUAL expresion:exp1 MENOS MAYOR expresion:exp2 {: utilities.Instruction.printArray(exp1.toString(),exp2.toString()); :}

            ;
printlist ::= printlist:izq COMA expresion:der               {: RESULT = izq.toString() + ", " + der.toString();:}
              | expresion:val                                {: RESULT = val.toString(); :}
;


declararVariable ::= RVAR:reservada DOSPUNTOS tipoDato:tipo DOSPUNTOS DOSPUNTOS ID:var MENOR MENOS expresion:val REND PYC {:
           main.Main.tablaSimbolos.put(var.toString(),
                           new utilities.Variable(var.toString(), tipo.toString(),val.toString(),reservadaright,reservadaleft));
                           System.out.println("Variable declarada: " + var.toString() + " - Tipo: " + tipo.toString() + " - Valor: " + val.toString());
                           System.out.println("Fila: " + reservadaright + " - Columna: " + reservadaleft);

:}

;

declararArreglo ::= RARRAY:reservada DOSPUNTOS tipoDato:tipo DOSPUNTOS DOSPUNTOS IDARRAY:id MENOR MENOS CORCHIZQ listaArray:val CORCHDER REND PYC {:

main.Main.tablaSimbolos.put(id.toString(),
 new utilities.Variable(id.toString(), tipo.toString(),val.toString(),reservadaright,reservadaleft));

:}

;

listaArray ::= listaArray:listaexp COMA expresion:exp {:

                                                        LinkedList<String> lista = (LinkedList<String>) listaexp;
                                                        lista.add(exp.toString());
                                                        RESULT = lista;
                                                       :}
            | expresion:exp                            {:
                                                              LinkedList<String> lista = new LinkedList<>();
                                                             lista.add(exp.toString());
                                                             RESULT = lista;
                                                        :}
;


tipoDato ::= RCHAR:val CORCHIZQ CORCHDER     {: RESULT = val.toString(); :}
            | RDOUBLE:val                    {: RESULT = val.toString(); :}
;


expresion ::= DOUBLE:val       {: RESULT = val.toString(); :}
           | CADENA:val        {:RESULT = val.toString(); :}
           | ID:val            {:

           utilities.Variable variable = main.Main.tablaSimbolos.get(val.toString());
            if (variable != null) {
            RESULT = variable.obtenerValor();
            }
                                :}
           | IDARRAY:val       {:   RESULT = val.toString();:}
           | RSUM PARIZQ expresion:izq COMA expresion:der PARDER   {: RESULT = utilities.Expression.Suma(izq.toString(),der.toString()); :}
           | RMUL PARIZQ expresion:izq COMA expresion:der PARDER   {: RESULT = utilities.Expression.Multiplicacion(izq.toString(),der.toString()); :}
           | RDIV PARIZQ expresion:izq COMA expresion:der PARDER   {: RESULT = utilities.Expression.Division(izq.toString(),der.toString()); :}
           | RRES PARIZQ expresion:izq COMA expresion:der PARDER   {: RESULT = utilities.Expression.Resta(izq.toString(),der.toString()); :}
           | RMOD PARIZQ expresion:izq COMA expresion:der PARDER   {: RESULT = utilities.Expression.Modulo(izq.toString(),der.toString()); :}
           | RMEDIA PARIZQ expresion:exp PARDER   {: RESULT = utilities.Expression.Media(exp.toString()); :}
           | CORCHIZQ printlist:val CORCHDER   {: RESULT = "[" + val.toString() + "]"; :}
           | RMAX PARIZQ expresion:exp PARDER   {: RESULT = utilities.Expression.Max(exp.toString()); :}
           | RMIN PARIZQ expresion:exp PARDER   {: RESULT = utilities.Expression.Min(exp.toString()); :}
           | RMEDIANA PARIZQ expresion:exp PARDER   {: RESULT = utilities.Expression.Mediana(exp.toString()); :}
           | RMODA PARIZQ expresion:exp PARDER   {: RESULT = utilities.Expression.Moda(exp.toString()); :}
           | RVARIANZA PARIZQ expresion:exp PARDER   {: RESULT = utilities.Expression.Varianza(exp.toString()); :}
;