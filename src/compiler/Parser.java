
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\016\003\000\002\017\004\000\002\017\003\000\002" +
    "\015\014\000\002\015\014\000\002\015\014\000\002\015" +
    "\014\000\002\023\004\000\002\023\003\000\002\024\012" +
    "\000\002\024\012\000\002\021\004\000\002\021\003\000" +
    "\002\022\012\000\002\022\012\000\002\022\012\000\002" +
    "\020\012\000\002\020\012\000\002\020\012\000\002\020" +
    "\012\000\002\020\012\000\002\006\010\000\002\014\005" +
    "\000\002\014\010\000\002\007\005\000\002\007\003\000" +
    "\002\010\015\000\002\012\017\000\002\013\005\000\002" +
    "\013\003\000\002\011\005\000\002\011\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\010\000\002\005\010\000\002\005\010\000" +
    "\002\005\010\000\002\005\010\000\002\005\006\000\002" +
    "\005\005\000\002\005\006\000\002\005\006\000\002\005" +
    "\006\000\002\005\006\000\002\005\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\004\004\004\001\002\000\022\003\021\006" +
    "\011\023\013\026\017\030\020\031\014\032\012\033\024" +
    "\001\002\000\004\002\006\001\002\000\004\002\001\001" +
    "\002\000\024\003\ufff8\005\ufff8\006\ufff8\023\ufff8\026\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\033\ufff8\001\002\000\024\003" +
    "\ufffd\005\ufffd\006\ufffd\023\ufffd\026\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\033\ufffd\001\002\000\004\053\365\001\002\000" +
    "\004\046\354\001\002\000\004\053\336\001\002\000\004" +
    "\046\273\001\002\000\024\003\ufffe\005\ufffe\006\ufffe\023" +
    "\ufffe\026\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\001\002" +
    "\000\024\003\ufffc\005\ufffc\006\ufffc\023\ufffc\026\ufffc\030" +
    "\ufffc\031\ufffc\032\ufffc\033\ufffc\001\002\000\004\053\254" +
    "\001\002\000\004\046\171\001\002\000\004\047\170\001" +
    "\002\000\024\003\021\005\166\006\011\023\013\026\017" +
    "\030\020\031\014\032\012\033\024\001\002\000\024\003" +
    "\ufffa\005\ufffa\006\ufffa\023\ufffa\026\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\001\002\000\004\046\026\001\002\000" +
    "\024\003\ufffb\005\ufffb\006\ufffb\023\ufffb\026\ufffb\030\ufffb" +
    "\031\ufffb\032\ufffb\033\ufffb\001\002\000\006\035\027\043" +
    "\031\001\002\000\004\053\156\001\002\000\010\034\146" +
    "\035\027\043\031\001\002\000\004\053\033\001\002\000" +
    "\010\034\ufff0\035\ufff0\043\ufff0\001\002\000\004\053\034" +
    "\001\002\000\006\024\036\025\035\001\002\000\006\053" +
    "\uffd9\055\uffd9\001\002\000\004\050\144\001\002\000\004" +
    "\055\040\001\002\000\042\007\056\010\054\011\045\012" +
    "\043\013\060\014\042\015\044\016\046\017\057\020\061" +
    "\021\051\050\047\060\050\061\041\062\053\063\055\001" +
    "\002\000\014\005\uffd7\045\uffd7\051\uffd7\052\uffd7\054\uffd7" +
    "\001\002\000\004\046\141\001\002\000\004\046\134\001" +
    "\002\000\004\046\131\001\002\000\004\046\124\001\002" +
    "\000\004\046\121\001\002\000\042\007\056\010\054\011" +
    "\045\012\043\013\060\014\042\015\044\016\046\017\057" +
    "\020\061\021\051\050\047\060\050\061\041\062\053\063" +
    "\055\001\002\000\014\005\uffd8\045\uffd8\051\uffd8\052\uffd8" +
    "\054\uffd8\001\002\000\004\046\111\001\002\000\004\005" +
    "\107\001\002\000\014\005\uffd6\045\uffd6\051\uffd6\052\uffd6" +
    "\054\uffd6\001\002\000\004\046\102\001\002\000\014\005" +
    "\uffd5\045\uffd5\051\uffd5\052\uffd5\054\uffd5\001\002\000\004" +
    "\046\075\001\002\000\004\046\072\001\002\000\004\046" +
    "\065\001\002\000\004\046\062\001\002\000\042\007\056" +
    "\010\054\011\045\012\043\013\060\014\042\015\044\016" +
    "\046\017\057\020\061\021\051\050\047\060\050\061\041" +
    "\062\053\063\055\001\002\000\004\045\064\001\002\000" +
    "\014\005\uffcd\045\uffcd\051\uffcd\052\uffcd\054\uffcd\001\002" +
    "\000\042\007\056\010\054\011\045\012\043\013\060\014" +
    "\042\015\044\016\046\017\057\020\061\021\051\050\047" +
    "\060\050\061\041\062\053\063\055\001\002\000\004\052" +
    "\067\001\002\000\042\007\056\010\054\011\045\012\043" +
    "\013\060\014\042\015\044\016\046\017\057\020\061\021" +
    "\051\050\047\060\050\061\041\062\053\063\055\001\002" +
    "\000\004\045\071\001\002\000\014\005\uffd0\045\uffd0\051" +
    "\uffd0\052\uffd0\054\uffd0\001\002\000\042\007\056\010\054" +
    "\011\045\012\043\013\060\014\042\015\044\016\046\017" +
    "\057\020\061\021\051\050\047\060\050\061\041\062\053" +
    "\063\055\001\002\000\004\045\074\001\002\000\014\005" +
    "\uffc9\045\uffc9\051\uffc9\052\uffc9\054\uffc9\001\002\000\042" +
    "\007\056\010\054\011\045\012\043\013\060\014\042\015" +
    "\044\016\046\017\057\020\061\021\051\050\047\060\050" +
    "\061\041\062\053\063\055\001\002\000\004\052\077\001" +
    "\002\000\042\007\056\010\054\011\045\012\043\013\060" +
    "\014\042\015\044\016\046\017\057\020\061\021\051\050" +
    "\047\060\050\061\041\062\053\063\055\001\002\000\004" +
    "\045\101\001\002\000\014\005\uffd1\045\uffd1\051\uffd1\052" +
    "\uffd1\054\uffd1\001\002\000\042\007\056\010\054\011\045" +
    "\012\043\013\060\014\042\015\044\016\046\017\057\020" +
    "\061\021\051\050\047\060\050\061\041\062\053\063\055" +
    "\001\002\000\004\052\104\001\002\000\042\007\056\010" +
    "\054\011\045\012\043\013\060\014\042\015\044\016\046" +
    "\017\057\020\061\021\051\050\047\060\050\061\041\062" +
    "\053\063\055\001\002\000\004\045\106\001\002\000\014" +
    "\005\uffd4\045\uffd4\051\uffd4\052\uffd4\054\uffd4\001\002\000" +
    "\004\047\110\001\002\000\010\034\uffee\035\uffee\043\uffee" +
    "\001\002\000\042\007\056\010\054\011\045\012\043\013" +
    "\060\014\042\015\044\016\046\017\057\020\061\021\051" +
    "\050\047\060\050\061\041\062\053\063\055\001\002\000" +
    "\004\045\113\001\002\000\014\005\uffcc\045\uffcc\051\uffcc" +
    "\052\uffcc\054\uffcc\001\002\000\010\005\uffdf\051\uffdf\052" +
    "\uffdf\001\002\000\006\051\117\052\116\001\002\000\042" +
    "\007\056\010\054\011\045\012\043\013\060\014\042\015" +
    "\044\016\046\017\057\020\061\021\051\050\047\060\050" +
    "\061\041\062\053\063\055\001\002\000\014\005\uffce\045" +
    "\uffce\051\uffce\052\uffce\054\uffce\001\002\000\010\005\uffe0" +
    "\051\uffe0\052\uffe0\001\002\000\042\007\056\010\054\011" +
    "\045\012\043\013\060\014\042\015\044\016\046\017\057" +
    "\020\061\021\051\050\047\060\050\061\041\062\053\063" +
    "\055\001\002\000\004\045\123\001\002\000\014\005\uffca" +
    "\045\uffca\051\uffca\052\uffca\054\uffca\001\002\000\042\007" +
    "\056\010\054\011\045\012\043\013\060\014\042\015\044" +
    "\016\046\017\057\020\061\021\051\050\047\060\050\061" +
    "\041\062\053\063\055\001\002\000\004\052\126\001\002" +
    "\000\042\007\056\010\054\011\045\012\043\013\060\014" +
    "\042\015\044\016\046\017\057\020\061\021\051\050\047" +
    "\060\050\061\041\062\053\063\055\001\002\000\004\045" +
    "\130\001\002\000\014\005\uffd3\045\uffd3\051\uffd3\052\uffd3" +
    "\054\uffd3\001\002\000\042\007\056\010\054\011\045\012" +
    "\043\013\060\014\042\015\044\016\046\017\057\020\061" +
    "\021\051\050\047\060\050\061\041\062\053\063\055\001" +
    "\002\000\004\045\133\001\002\000\014\005\uffcb\045\uffcb" +
    "\051\uffcb\052\uffcb\054\uffcb\001\002\000\042\007\056\010" +
    "\054\011\045\012\043\013\060\014\042\015\044\016\046" +
    "\017\057\020\061\021\051\050\047\060\050\061\041\062" +
    "\053\063\055\001\002\000\004\052\136\001\002\000\042" +
    "\007\056\010\054\011\045\012\043\013\060\014\042\015" +
    "\044\016\046\017\057\020\061\021\051\050\047\060\050" +
    "\061\041\062\053\063\055\001\002\000\004\045\140\001" +
    "\002\000\014\005\uffd2\045\uffd2\051\uffd2\052\uffd2\054\uffd2" +
    "\001\002\000\042\007\056\010\054\011\045\012\043\013" +
    "\060\014\042\015\044\016\046\017\057\020\061\021\051" +
    "\050\047\060\050\061\041\062\053\063\055\001\002\000" +
    "\004\045\143\001\002\000\014\005\uffcf\045\uffcf\051\uffcf" +
    "\052\uffcf\054\uffcf\001\002\000\004\051\145\001\002\000" +
    "\006\053\uffda\055\uffda\001\002\000\004\033\150\001\002" +
    "\000\010\034\ufff1\035\ufff1\043\ufff1\001\002\000\004\005" +
    "\151\001\002\000\004\047\152\001\002\000\004\045\153" +
    "\001\002\000\004\005\154\001\002\000\004\047\155\001" +
    "\002\000\024\003\ufff2\005\ufff2\006\ufff2\023\ufff2\026\ufff2" +
    "\030\ufff2\031\ufff2\032\ufff2\033\ufff2\001\002\000\004\053" +
    "\157\001\002\000\006\024\036\025\035\001\002\000\004" +
    "\055\161\001\002\000\042\007\056\010\054\011\045\012" +
    "\043\013\060\014\042\015\044\016\046\017\057\020\061" +
    "\021\051\050\047\060\050\061\041\062\053\063\055\001" +
    "\002\000\004\005\163\001\002\000\004\047\164\001\002" +
    "\000\010\034\uffef\035\uffef\043\uffef\001\002\000\024\003" +
    "\uffff\005\uffff\006\uffff\023\uffff\026\uffff\030\uffff\031\uffff" +
    "\032\uffff\033\uffff\001\002\000\004\004\167\001\002\000" +
    "\004\002\000\001\002\000\024\003\ufff9\005\ufff9\006\ufff9" +
    "\023\ufff9\026\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\001" +
    "\002\000\014\035\172\036\174\037\173\040\176\041\175" +
    "\001\002\000\004\053\245\001\002\000\004\053\236\001" +
    "\002\000\004\053\227\001\002\000\004\053\220\001\002" +
    "\000\004\053\211\001\002\000\016\034\201\035\172\036" +
    "\174\037\173\040\176\041\175\001\002\000\016\034\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\001\002\000" +
    "\004\030\203\001\002\000\016\034\ufff7\035\ufff7\036\ufff7" +
    "\037\ufff7\040\ufff7\041\ufff7\001\002\000\004\005\204\001" +
    "\002\000\004\047\205\001\002\000\004\045\206\001\002" +
    "\000\004\005\207\001\002\000\004\047\210\001\002\000" +
    "\024\003\ufff5\005\ufff5\006\ufff5\023\ufff5\026\ufff5\030\ufff5" +
    "\031\ufff5\032\ufff5\033\ufff5\001\002\000\004\053\212\001" +
    "\002\000\006\024\036\025\035\001\002\000\004\055\214" +
    "\001\002\000\042\007\056\010\054\011\045\012\043\013" +
    "\060\014\042\015\044\016\046\017\057\020\061\021\051" +
    "\050\047\060\050\061\041\062\053\063\055\001\002\000" +
    "\004\005\216\001\002\000\004\047\217\001\002\000\016" +
    "\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\001" +
    "\002\000\004\053\221\001\002\000\006\024\036\025\035" +
    "\001\002\000\004\055\223\001\002\000\042\007\056\010" +
    "\054\011\045\012\043\013\060\014\042\015\044\016\046" +
    "\017\057\020\061\021\051\050\047\060\050\061\041\062" +
    "\053\063\055\001\002\000\004\005\225\001\002\000\004" +
    "\047\226\001\002\000\016\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\040\uffe4\041\uffe4\001\002\000\004\053\230\001\002" +
    "\000\006\024\036\025\035\001\002\000\004\055\232\001" +
    "\002\000\042\007\056\010\054\011\045\012\043\013\060" +
    "\014\042\015\044\016\046\017\057\020\061\021\051\050" +
    "\047\060\050\061\041\062\053\063\055\001\002\000\004" +
    "\005\234\001\002\000\004\047\235\001\002\000\016\034" +
    "\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\001\002" +
    "\000\004\053\237\001\002\000\006\024\036\025\035\001" +
    "\002\000\004\055\241\001\002\000\042\007\056\010\054" +
    "\011\045\012\043\013\060\014\042\015\044\016\046\017" +
    "\057\020\061\021\051\050\047\060\050\061\041\062\053" +
    "\063\055\001\002\000\004\005\243\001\002\000\004\047" +
    "\244\001\002\000\016\034\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\040\uffe6\041\uffe6\001\002\000\004\053\246\001\002\000" +
    "\006\024\036\025\035\001\002\000\004\055\250\001\002" +
    "\000\042\007\056\010\054\011\045\012\043\013\060\014" +
    "\042\015\044\016\046\017\057\020\061\021\051\050\047" +
    "\060\050\061\041\062\053\063\055\001\002\000\004\005" +
    "\252\001\002\000\004\047\253\001\002\000\016\034\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\001\002\000" +
    "\006\024\036\025\035\001\002\000\004\053\256\001\002" +
    "\000\004\053\257\001\002\000\004\063\260\001\002\000" +
    "\004\056\261\001\002\000\004\054\262\001\002\000\004" +
    "\050\263\001\002\000\042\007\056\010\054\011\045\012" +
    "\043\013\060\014\042\015\044\016\046\017\057\020\061" +
    "\021\051\050\047\060\050\061\041\062\053\063\055\001" +
    "\002\000\006\051\uffdb\052\uffdb\001\002\000\006\051\267" +
    "\052\266\001\002\000\042\007\056\010\054\011\045\012" +
    "\043\013\060\014\042\015\044\016\046\017\057\020\061" +
    "\021\051\050\047\060\050\061\041\062\053\063\055\001" +
    "\002\000\004\005\270\001\002\000\004\047\271\001\002" +
    "\000\024\003\uffdd\005\uffdd\006\uffdd\023\uffdd\026\uffdd\030" +
    "\uffdd\031\uffdd\032\uffdd\033\uffdd\001\002\000\006\051\uffdc" +
    "\052\uffdc\001\002\000\010\035\277\042\274\043\276\001" +
    "\002\000\004\053\327\001\002\000\012\034\317\035\277" +
    "\042\274\043\276\001\002\000\004\053\310\001\002\000" +
    "\004\053\301\001\002\000\012\034\uffec\035\uffec\042\uffec" +
    "\043\uffec\001\002\000\004\053\302\001\002\000\006\024" +
    "\036\025\035\001\002\000\004\055\304\001\002\000\042" +
    "\007\056\010\054\011\045\012\043\013\060\014\042\015" +
    "\044\016\046\017\057\020\061\021\051\050\047\060\050" +
    "\061\041\062\053\063\055\001\002\000\004\005\306\001" +
    "\002\000\004\047\307\001\002\000\012\034\uffe9\035\uffe9" +
    "\042\uffe9\043\uffe9\001\002\000\004\053\311\001\002\000" +
    "\006\024\036\025\035\001\002\000\004\055\313\001\002" +
    "\000\042\007\056\010\054\011\045\012\043\013\060\014" +
    "\042\015\044\016\046\017\057\020\061\021\051\050\047" +
    "\060\050\061\041\062\053\063\055\001\002\000\004\005" +
    "\315\001\002\000\004\047\316\001\002\000\012\034\uffea" +
    "\035\uffea\042\uffea\043\uffea\001\002\000\004\031\321\001" +
    "\002\000\012\034\uffed\035\uffed\042\uffed\043\uffed\001\002" +
    "\000\004\005\322\001\002\000\004\047\323\001\002\000" +
    "\004\045\324\001\002\000\004\005\325\001\002\000\004" +
    "\047\326\001\002\000\024\003\ufff4\005\ufff4\006\ufff4\023" +
    "\ufff4\026\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\001\002" +
    "\000\004\053\330\001\002\000\006\024\036\025\035\001" +
    "\002\000\004\055\332\001\002\000\042\007\056\010\054" +
    "\011\045\012\043\013\060\014\042\015\044\016\046\017" +
    "\057\020\061\021\051\050\047\060\050\061\041\062\053" +
    "\063\055\001\002\000\004\005\334\001\002\000\004\047" +
    "\335\001\002\000\012\034\uffeb\035\uffeb\042\uffeb\043\uffeb" +
    "\001\002\000\004\053\337\001\002\000\006\022\342\027" +
    "\340\001\002\000\004\055\347\001\002\000\004\005\345" +
    "\001\002\000\004\055\343\001\002\000\042\007\056\010" +
    "\054\011\045\012\043\013\060\014\042\015\044\016\046" +
    "\017\057\020\061\021\051\050\047\060\050\061\041\062" +
    "\053\063\055\001\002\000\006\005\uffe2\052\116\001\002" +
    "\000\004\047\346\001\002\000\024\003\uffe3\005\uffe3\006" +
    "\uffe3\023\uffe3\026\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3" +
    "\001\002\000\042\007\056\010\054\011\045\012\043\013" +
    "\060\014\042\015\044\016\046\017\057\020\061\021\051" +
    "\050\047\060\050\061\041\062\053\063\055\001\002\000" +
    "\004\054\351\001\002\000\004\057\352\001\002\000\042" +
    "\007\056\010\054\011\045\012\043\013\060\014\042\015" +
    "\044\016\046\017\057\020\061\021\051\050\047\060\050" +
    "\061\041\062\053\063\055\001\002\000\004\005\uffe1\001" +
    "\002\000\014\035\172\036\174\037\173\040\176\041\175" +
    "\001\002\000\016\034\356\035\172\036\174\037\173\040" +
    "\176\041\175\001\002\000\004\032\357\001\002\000\004" +
    "\005\360\001\002\000\004\047\361\001\002\000\004\045" +
    "\362\001\002\000\004\005\363\001\002\000\004\047\364" +
    "\001\002\000\024\003\ufff3\005\ufff3\006\ufff3\023\ufff3\026" +
    "\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\001\002\000\006" +
    "\024\036\025\035\001\002\000\004\053\367\001\002\000" +
    "\004\053\370\001\002\000\004\062\371\001\002\000\004" +
    "\056\372\001\002\000\004\054\373\001\002\000\042\007" +
    "\056\010\054\011\045\012\043\013\060\014\042\015\044" +
    "\016\046\017\057\020\061\021\051\050\047\060\050\061" +
    "\041\062\053\063\055\001\002\000\004\005\375\001\002" +
    "\000\004\047\376\001\002\000\024\003\uffde\005\uffde\006" +
    "\uffde\023\uffde\026\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\374\000\004\002\004\001\001\000\020\003\021\004" +
    "\014\006\007\010\015\012\024\015\006\016\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\164\006\007\010\015\012\024\015\006\016" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\023\027\024\031\001\001\000\002\001" +
    "\001\000\004\024\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\113\007\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\065\001\001\000\002\001\001\000\004\005\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\075\001\001\000\002\001\001\000\004\005\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\102" +
    "\001\001\000\002\001\001\000\004\005\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\124\001\001\000\002\001\001\000\004\005" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\134\001\001\000\002\001\001\000\004\005\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\141\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\157\001\001\000\002\001\001" +
    "\000\004\005\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\176\020" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\201\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\212\001\001\000\002\001" +
    "\001\000\004\005\214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\221\001\001\000\002\001\001\000\004\005\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\230\001\001\000\002\001\001" +
    "\000\004\005\232\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\237" +
    "\001\001\000\002\001\001\000\004\005\241\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\246\001\001\000\002\001\001\000" +
    "\004\005\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\263\013" +
    "\264\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\271\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\021\274\022\277" +
    "\001\001\000\002\001\001\000\004\022\317\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\302\001\001\000\002\001\001\000" +
    "\004\005\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\311\001" +
    "\001\000\002\001\001\000\004\005\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\330\001\001" +
    "\000\002\001\001\000\004\005\332\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\340\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\113\007\343\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\347\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\352\001\001\000\002\001\001\000\006\017" +
    "\354\020\177\001\001\000\004\020\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\365\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\373\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = "";

    public void syntax_error(Symbol s)
    {
            main.Main.listaErrores.add(new utilities.ErrorClass("Sintáctico", (String) s.value, s.right, s.left ));
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            main.Main.listaErrores.add(new utilities.ErrorClass("Sintáctico", (String) s.value, s.right, s.left ));
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= RPROGRAM listainstr REND RPROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listainstr ::= listainstr instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listainstr ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= print 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declararVariable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= declararArreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= graficar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= error PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // graficar ::= tipoGrafica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listaSentenciasBar ::= listaSentenciasBar sentenciasBar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasBar",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listaSentenciasBar ::= sentenciasBar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasBar",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipoGrafica ::= RGRAPHBAR PARIZQ listaSentenciasBar REXEC RGRAPHBAR REND PYC PARDER REND PYC 
            {
              Object RESULT =null;
		
                utilities.Instruction.graficarBarra();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoGrafica",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipoGrafica ::= RGRAPHPIE PARIZQ listaSentenciasPie REXEC RGRAPHPIE REND PYC PARDER REND PYC 
            {
              Object RESULT =null;
		utilities.Instruction.graficarPie();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoGrafica",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipoGrafica ::= RGRAPHLINE PARIZQ listaSentenciasBar REXEC RGRAPHLINE REND PYC PARDER REND PYC 
            {
              Object RESULT =null;
		utilities.Instruction.graficarLinea();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoGrafica",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipoGrafica ::= RHISTOGRAM PARIZQ listaSentenciasHistograma REXEC RHISTOGRAM REND PYC PARDER REND PYC 
            {
              Object RESULT =null;
		utilities.Instruction.graficarHistograma();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoGrafica",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // listaSentenciasHistograma ::= listaSentenciasHistograma sentenciasHistograma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasHistograma",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // listaSentenciasHistograma ::= sentenciasHistograma 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasHistograma",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentenciasHistograma ::= RTITULO DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion REND PYC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		main.Main.sentenciasGraph.put("titulo",exp.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasHistograma",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentenciasHistograma ::= RVALUES DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion REND PYC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 main.Main.sentenciasGraph.put("values",exp.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasHistograma",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // listaSentenciasPie ::= listaSentenciasPie sentenciasPie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasPie",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // listaSentenciasPie ::= sentenciasPie 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasPie",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // sentenciasPie ::= RLABEL DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion REND PYC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		main.Main.sentenciasGraph.put("label",exp.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasPie",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // sentenciasPie ::= RVALUES DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion REND PYC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 main.Main.sentenciasGraph.put("values",exp.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasPie",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // sentenciasPie ::= RTITULO DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion REND PYC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 main.Main.sentenciasGraph.put("titulo",exp.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasPie",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentenciasBar ::= RTITULO DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion REND PYC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		main.Main.sentenciasGraph.put("titulo",exp.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasBar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentenciasBar ::= REJEX DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion REND PYC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 main.Main.sentenciasGraph.put("ejeX",exp.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasBar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentenciasBar ::= REJEY DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion REND PYC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 main.Main.sentenciasGraph.put("ejeY",exp.toString());;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasBar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentenciasBar ::= RTITULOX DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion REND PYC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 main.Main.sentenciasGraph.put("tituloX",exp.toString());;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasBar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentenciasBar ::= RTITULOY DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion REND PYC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 main.Main.sentenciasGraph.put("tituloY",exp.toString());;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasBar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // print ::= RCONSOLE DOSPUNTOS DOSPUNTOS tipoPrint REND PYC 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipoPrint ::= RPRINT IGUAL printlist 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 utilities.Instruction.print(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoPrint",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // tipoPrint ::= RCOLUMN IGUAL expresion MENOS MAYOR expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 utilities.Instruction.printArray(exp1.toString(),exp2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoPrint",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // printlist ::= printlist COMA expresion 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = izq.toString() + ", " + der.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printlist",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // printlist ::= expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printlist",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declararVariable ::= RVAR DOSPUNTOS tipoDato DOSPUNTOS DOSPUNTOS ID MENOR MENOS expresion REND PYC 
            {
              Object RESULT =null;
		int reservadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int reservadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String reservada = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
           main.Main.tablaSimbolos.put(var.toString(),
                           new utilities.Variable(var.toString(), tipo.toString(),val.toString(),reservadaright,reservadaleft));

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declararArreglo ::= RARRAY DOSPUNTOS tipoDato DOSPUNTOS DOSPUNTOS IDARRAY MENOR MENOS CORCHIZQ listaArray CORCHDER REND PYC 
            {
              Object RESULT =null;
		int reservadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int reservadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String reservada = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		

main.Main.tablaSimbolos.put(id.toString(),
 new utilities.Variable(id.toString(), tipo.toString(),val.toString(),reservadaright,reservadaleft));


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararArreglo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // listaArray ::= listaArray COMA expresion 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                                        LinkedList<String> lista = (LinkedList<String>) listaexp;
                                                        lista.add(exp.toString());
                                                        RESULT = lista;
                                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaArray",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // listaArray ::= expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                              LinkedList<String> lista = new LinkedList<>();
                                                             lista.add(exp.toString());
                                                             RESULT = lista;
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaArray",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipoDato ::= RCHAR CORCHIZQ CORCHDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // tipoDato ::= RDOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= DOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

           utilities.Variable variable = main.Main.tablaSimbolos.get(val.toString());
            if (variable != null) {
            RESULT = variable.obtenerValor();
            }
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= IDARRAY 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = val.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= RSUM PARIZQ expresion COMA expresion PARDER 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Suma(izq.toString(),der.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= RMUL PARIZQ expresion COMA expresion PARDER 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Multiplicacion(izq.toString(),der.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= RDIV PARIZQ expresion COMA expresion PARDER 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Division(izq.toString(),der.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expresion ::= RRES PARIZQ expresion COMA expresion PARDER 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Resta(izq.toString(),der.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expresion ::= RMOD PARIZQ expresion COMA expresion PARDER 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Modulo(izq.toString(),der.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expresion ::= RMEDIA PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Media(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expresion ::= CORCHIZQ printlist CORCHDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "[" + val.toString() + "]"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expresion ::= RMAX PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Max(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expresion ::= RMIN PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Min(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expresion ::= RMEDIANA PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Mediana(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expresion ::= RMODA PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Moda(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expresion ::= RVARIANZA PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Varianza(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
