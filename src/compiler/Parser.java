
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package compiler;

import java_cup.runtime.*;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\004\000" +
    "\002\016\003\000\002\017\004\000\002\017\003\000\002" +
    "\015\014\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\020\012\000\002\020\012\000\002\020\012" +
    "\000\002\020\012\000\002\020\012\000\002\006\010\000" +
    "\002\014\005\000\002\014\010\000\002\007\005\000\002" +
    "\007\003\000\002\010\015\000\002\012\017\000\002\013" +
    "\005\000\002\013\003\000\002\011\005\000\002\011\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\010\000\002\005\010\000\002" +
    "\005\010\000\002\005\010\000\002\005\010\000\002\005" +
    "\006\000\002\005\005\000\002\005\006\000\002\005\006" +
    "\000\002\005\006\000\002\005\006\000\002\005\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\004\004\004\001\002\000\022\003\021\006" +
    "\011\023\012\026\017\030\020\031\014\032\013\033\024" +
    "\001\002\000\004\002\006\001\002\000\004\002\001\001" +
    "\002\000\024\003\ufff8\005\ufff8\006\ufff8\023\ufff8\026\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\033\ufff8\001\002\000\024\003" +
    "\ufffd\005\ufffd\006\ufffd\023\ufffd\026\ufffd\030\ufffd\031\ufffd" +
    "\032\ufffd\033\ufffd\001\002\000\004\051\256\001\002\000" +
    "\004\051\240\001\002\000\024\003\ufff3\005\ufff3\006\ufff3" +
    "\023\ufff3\026\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\001" +
    "\002\000\024\003\ufff4\005\ufff4\006\ufff4\023\ufff4\026\ufff4" +
    "\030\ufff4\031\ufff4\032\ufff4\033\ufff4\001\002\000\024\003" +
    "\ufffe\005\ufffe\006\ufffe\023\ufffe\026\ufffe\030\ufffe\031\ufffe" +
    "\032\ufffe\033\ufffe\001\002\000\024\003\ufffc\005\ufffc\006" +
    "\ufffc\023\ufffc\026\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\001\002\000\004\051\221\001\002\000\004\044\032\001" +
    "\002\000\004\045\031\001\002\000\024\003\021\005\027" +
    "\006\011\023\012\026\017\030\020\031\014\032\013\033" +
    "\024\001\002\000\024\003\ufffa\005\ufffa\006\ufffa\023\ufffa" +
    "\026\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\001\002\000" +
    "\024\003\ufff2\005\ufff2\006\ufff2\023\ufff2\026\ufff2\030\ufff2" +
    "\031\ufff2\032\ufff2\033\ufff2\001\002\000\024\003\ufffb\005" +
    "\ufffb\006\ufffb\023\ufffb\026\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\001\002\000\024\003\uffff\005\uffff\006\uffff\023" +
    "\uffff\026\uffff\030\uffff\031\uffff\032\uffff\033\uffff\001\002" +
    "\000\004\004\030\001\002\000\004\002\000\001\002\000" +
    "\024\003\ufff9\005\ufff9\006\ufff9\023\ufff9\026\ufff9\030\ufff9" +
    "\031\ufff9\032\ufff9\033\ufff9\001\002\000\014\035\033\036" +
    "\035\037\034\040\040\041\036\001\002\000\004\051\212" +
    "\001\002\000\004\051\203\001\002\000\004\051\174\001" +
    "\002\000\004\051\165\001\002\000\016\034\155\035\033" +
    "\036\035\037\034\040\040\041\036\001\002\000\004\051" +
    "\042\001\002\000\016\034\ufff6\035\ufff6\036\ufff6\037\ufff6" +
    "\040\ufff6\041\ufff6\001\002\000\004\051\043\001\002\000" +
    "\006\024\045\025\044\001\002\000\006\051\uffe2\053\uffe2" +
    "\001\002\000\004\046\153\001\002\000\004\053\047\001" +
    "\002\000\042\007\065\010\063\011\055\012\052\013\067" +
    "\014\051\015\053\016\054\017\066\020\070\021\060\046" +
    "\056\056\057\057\050\060\062\061\064\001\002\000\014" +
    "\005\uffe0\043\uffe0\047\uffe0\050\uffe0\052\uffe0\001\002\000" +
    "\004\044\150\001\002\000\004\044\143\001\002\000\004" +
    "\044\140\001\002\000\004\044\135\001\002\000\004\044" +
    "\130\001\002\000\042\007\065\010\063\011\055\012\052" +
    "\013\067\014\051\015\053\016\054\017\066\020\070\021" +
    "\060\046\056\056\057\057\050\060\062\061\064\001\002" +
    "\000\014\005\uffe1\043\uffe1\047\uffe1\050\uffe1\052\uffe1\001" +
    "\002\000\004\044\120\001\002\000\004\005\116\001\002" +
    "\000\014\005\uffdf\043\uffdf\047\uffdf\050\uffdf\052\uffdf\001" +
    "\002\000\004\044\111\001\002\000\014\005\uffde\043\uffde" +
    "\047\uffde\050\uffde\052\uffde\001\002\000\004\044\104\001" +
    "\002\000\004\044\101\001\002\000\004\044\074\001\002" +
    "\000\004\044\071\001\002\000\042\007\065\010\063\011" +
    "\055\012\052\013\067\014\051\015\053\016\054\017\066" +
    "\020\070\021\060\046\056\056\057\057\050\060\062\061" +
    "\064\001\002\000\004\043\073\001\002\000\014\005\uffd6" +
    "\043\uffd6\047\uffd6\050\uffd6\052\uffd6\001\002\000\042\007" +
    "\065\010\063\011\055\012\052\013\067\014\051\015\053" +
    "\016\054\017\066\020\070\021\060\046\056\056\057\057" +
    "\050\060\062\061\064\001\002\000\004\050\076\001\002" +
    "\000\042\007\065\010\063\011\055\012\052\013\067\014" +
    "\051\015\053\016\054\017\066\020\070\021\060\046\056" +
    "\056\057\057\050\060\062\061\064\001\002\000\004\043" +
    "\100\001\002\000\014\005\uffd9\043\uffd9\047\uffd9\050\uffd9" +
    "\052\uffd9\001\002\000\042\007\065\010\063\011\055\012" +
    "\052\013\067\014\051\015\053\016\054\017\066\020\070" +
    "\021\060\046\056\056\057\057\050\060\062\061\064\001" +
    "\002\000\004\043\103\001\002\000\014\005\uffd2\043\uffd2" +
    "\047\uffd2\050\uffd2\052\uffd2\001\002\000\042\007\065\010" +
    "\063\011\055\012\052\013\067\014\051\015\053\016\054" +
    "\017\066\020\070\021\060\046\056\056\057\057\050\060" +
    "\062\061\064\001\002\000\004\050\106\001\002\000\042" +
    "\007\065\010\063\011\055\012\052\013\067\014\051\015" +
    "\053\016\054\017\066\020\070\021\060\046\056\056\057" +
    "\057\050\060\062\061\064\001\002\000\004\043\110\001" +
    "\002\000\014\005\uffda\043\uffda\047\uffda\050\uffda\052\uffda" +
    "\001\002\000\042\007\065\010\063\011\055\012\052\013" +
    "\067\014\051\015\053\016\054\017\066\020\070\021\060" +
    "\046\056\056\057\057\050\060\062\061\064\001\002\000" +
    "\004\050\113\001\002\000\042\007\065\010\063\011\055" +
    "\012\052\013\067\014\051\015\053\016\054\017\066\020" +
    "\070\021\060\046\056\056\057\057\050\060\062\061\064" +
    "\001\002\000\004\043\115\001\002\000\014\005\uffdd\043" +
    "\uffdd\047\uffdd\050\uffdd\052\uffdd\001\002\000\004\045\117" +
    "\001\002\000\016\034\uffee\035\uffee\036\uffee\037\uffee\040" +
    "\uffee\041\uffee\001\002\000\042\007\065\010\063\011\055" +
    "\012\052\013\067\014\051\015\053\016\054\017\066\020" +
    "\070\021\060\046\056\056\057\057\050\060\062\061\064" +
    "\001\002\000\004\043\122\001\002\000\014\005\uffd5\043" +
    "\uffd5\047\uffd5\050\uffd5\052\uffd5\001\002\000\010\005\uffe8" +
    "\047\uffe8\050\uffe8\001\002\000\006\047\126\050\125\001" +
    "\002\000\042\007\065\010\063\011\055\012\052\013\067" +
    "\014\051\015\053\016\054\017\066\020\070\021\060\046" +
    "\056\056\057\057\050\060\062\061\064\001\002\000\014" +
    "\005\uffd7\043\uffd7\047\uffd7\050\uffd7\052\uffd7\001\002\000" +
    "\010\005\uffe9\047\uffe9\050\uffe9\001\002\000\042\007\065" +
    "\010\063\011\055\012\052\013\067\014\051\015\053\016" +
    "\054\017\066\020\070\021\060\046\056\056\057\057\050" +
    "\060\062\061\064\001\002\000\004\050\132\001\002\000" +
    "\042\007\065\010\063\011\055\012\052\013\067\014\051" +
    "\015\053\016\054\017\066\020\070\021\060\046\056\056" +
    "\057\057\050\060\062\061\064\001\002\000\004\043\134" +
    "\001\002\000\014\005\uffdc\043\uffdc\047\uffdc\050\uffdc\052" +
    "\uffdc\001\002\000\042\007\065\010\063\011\055\012\052" +
    "\013\067\014\051\015\053\016\054\017\066\020\070\021" +
    "\060\046\056\056\057\057\050\060\062\061\064\001\002" +
    "\000\004\043\137\001\002\000\014\005\uffd3\043\uffd3\047" +
    "\uffd3\050\uffd3\052\uffd3\001\002\000\042\007\065\010\063" +
    "\011\055\012\052\013\067\014\051\015\053\016\054\017" +
    "\066\020\070\021\060\046\056\056\057\057\050\060\062" +
    "\061\064\001\002\000\004\043\142\001\002\000\014\005" +
    "\uffd4\043\uffd4\047\uffd4\050\uffd4\052\uffd4\001\002\000\042" +
    "\007\065\010\063\011\055\012\052\013\067\014\051\015" +
    "\053\016\054\017\066\020\070\021\060\046\056\056\057" +
    "\057\050\060\062\061\064\001\002\000\004\050\145\001" +
    "\002\000\042\007\065\010\063\011\055\012\052\013\067" +
    "\014\051\015\053\016\054\017\066\020\070\021\060\046" +
    "\056\056\057\057\050\060\062\061\064\001\002\000\004" +
    "\043\147\001\002\000\014\005\uffdb\043\uffdb\047\uffdb\050" +
    "\uffdb\052\uffdb\001\002\000\042\007\065\010\063\011\055" +
    "\012\052\013\067\014\051\015\053\016\054\017\066\020" +
    "\070\021\060\046\056\056\057\057\050\060\062\061\064" +
    "\001\002\000\004\043\152\001\002\000\014\005\uffd8\043" +
    "\uffd8\047\uffd8\050\uffd8\052\uffd8\001\002\000\004\047\154" +
    "\001\002\000\006\051\uffe3\053\uffe3\001\002\000\004\030" +
    "\157\001\002\000\016\034\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\040\ufff7\041\ufff7\001\002\000\004\005\160\001\002\000" +
    "\004\045\161\001\002\000\004\043\162\001\002\000\004" +
    "\005\163\001\002\000\004\045\164\001\002\000\024\003" +
    "\ufff5\005\ufff5\006\ufff5\023\ufff5\026\ufff5\030\ufff5\031\ufff5" +
    "\032\ufff5\033\ufff5\001\002\000\004\051\166\001\002\000" +
    "\006\024\045\025\044\001\002\000\004\053\170\001\002" +
    "\000\042\007\065\010\063\011\055\012\052\013\067\014" +
    "\051\015\053\016\054\017\066\020\070\021\060\046\056" +
    "\056\057\057\050\060\062\061\064\001\002\000\004\005" +
    "\172\001\002\000\004\045\173\001\002\000\016\034\uffed" +
    "\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\001\002\000" +
    "\004\051\175\001\002\000\006\024\045\025\044\001\002" +
    "\000\004\053\177\001\002\000\042\007\065\010\063\011" +
    "\055\012\052\013\067\014\051\015\053\016\054\017\066" +
    "\020\070\021\060\046\056\056\057\057\050\060\062\061" +
    "\064\001\002\000\004\005\201\001\002\000\004\045\202" +
    "\001\002\000\016\034\ufff0\035\ufff0\036\ufff0\037\ufff0\040" +
    "\ufff0\041\ufff0\001\002\000\004\051\204\001\002\000\006" +
    "\024\045\025\044\001\002\000\004\053\206\001\002\000" +
    "\042\007\065\010\063\011\055\012\052\013\067\014\051" +
    "\015\053\016\054\017\066\020\070\021\060\046\056\056" +
    "\057\057\050\060\062\061\064\001\002\000\004\005\210" +
    "\001\002\000\004\045\211\001\002\000\016\034\uffef\035" +
    "\uffef\036\uffef\037\uffef\040\uffef\041\uffef\001\002\000\004" +
    "\051\213\001\002\000\006\024\045\025\044\001\002\000" +
    "\004\053\215\001\002\000\042\007\065\010\063\011\055" +
    "\012\052\013\067\014\051\015\053\016\054\017\066\020" +
    "\070\021\060\046\056\056\057\057\050\060\062\061\064" +
    "\001\002\000\004\005\217\001\002\000\004\045\220\001" +
    "\002\000\016\034\ufff1\035\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\001\002\000\006\024\045\025\044\001\002\000" +
    "\004\051\223\001\002\000\004\051\224\001\002\000\004" +
    "\061\225\001\002\000\004\054\226\001\002\000\004\052" +
    "\227\001\002\000\004\046\230\001\002\000\042\007\065" +
    "\010\063\011\055\012\052\013\067\014\051\015\053\016" +
    "\054\017\066\020\070\021\060\046\056\056\057\057\050" +
    "\060\062\061\064\001\002\000\006\047\uffe4\050\uffe4\001" +
    "\002\000\006\047\234\050\233\001\002\000\042\007\065" +
    "\010\063\011\055\012\052\013\067\014\051\015\053\016" +
    "\054\017\066\020\070\021\060\046\056\056\057\057\050" +
    "\060\062\061\064\001\002\000\004\005\235\001\002\000" +
    "\004\045\236\001\002\000\024\003\uffe6\005\uffe6\006\uffe6" +
    "\023\uffe6\026\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\001" +
    "\002\000\006\047\uffe5\050\uffe5\001\002\000\004\051\241" +
    "\001\002\000\006\022\244\027\242\001\002\000\004\053" +
    "\251\001\002\000\004\005\247\001\002\000\004\053\245" +
    "\001\002\000\042\007\065\010\063\011\055\012\052\013" +
    "\067\014\051\015\053\016\054\017\066\020\070\021\060" +
    "\046\056\056\057\057\050\060\062\061\064\001\002\000" +
    "\006\005\uffeb\050\125\001\002\000\004\045\250\001\002" +
    "\000\024\003\uffec\005\uffec\006\uffec\023\uffec\026\uffec\030" +
    "\uffec\031\uffec\032\uffec\033\uffec\001\002\000\042\007\065" +
    "\010\063\011\055\012\052\013\067\014\051\015\053\016" +
    "\054\017\066\020\070\021\060\046\056\056\057\057\050" +
    "\060\062\061\064\001\002\000\004\052\253\001\002\000" +
    "\004\055\254\001\002\000\042\007\065\010\063\011\055" +
    "\012\052\013\067\014\051\015\053\016\054\017\066\020" +
    "\070\021\060\046\056\056\057\057\050\060\062\061\064" +
    "\001\002\000\004\005\uffea\001\002\000\006\024\045\025" +
    "\044\001\002\000\004\051\260\001\002\000\004\051\261" +
    "\001\002\000\004\060\262\001\002\000\004\054\263\001" +
    "\002\000\004\052\264\001\002\000\042\007\065\010\063" +
    "\011\055\012\052\013\067\014\051\015\053\016\054\017" +
    "\066\020\070\021\060\046\056\056\057\057\050\060\062" +
    "\061\064\001\002\000\004\005\266\001\002\000\004\045" +
    "\267\001\002\000\024\003\uffe7\005\uffe7\006\uffe7\023\uffe7" +
    "\026\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\265\000\004\002\004\001\001\000\020\003\021\004" +
    "\014\006\007\010\015\012\024\015\006\016\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\004\025\006\007\010\015\012\024\015\006\016" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\036\020\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\155\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\122\007\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\074\001\001\000\002\001\001\000\004" +
    "\005\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\104\001\001\000\002\001\001\000\004\005" +
    "\106\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\111\001\001\000\002\001\001\000\004\005\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\126\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\130\001\001\000\002\001\001\000\004" +
    "\005\132\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\135\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\143\001\001\000\002\001\001\000\004" +
    "\005\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\150\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\166\001\001\000\002" +
    "\001\001\000\004\005\170\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\175\001\001\000\002\001\001\000\004\005\177\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\204\001\001\000\002\001" +
    "\001\000\004\005\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\213\001\001\000\002\001\001\000\004\005\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\221\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\230\013\231\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\236\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\122\007\245\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\251\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\254\001\001\000" +
    "\002\001\001\000\004\011\256\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = "";

    public void syntax_error(Symbol s)
    {
            main.Main.listaErrores.add(new utilities.ErrorClass("Sintáctico", (String) s.value, s.right, s.left ));
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            main.Main.listaErrores.add(new utilities.ErrorClass("Sintáctico", (String) s.value, s.right, s.left ));
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= RPROGRAM listainstr REND RPROGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listainstr ::= listainstr instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listainstr ::= instruccion 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listainstr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= print 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= declararVariable 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= declararArreglo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= graficar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= error PYC 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // graficar ::= tipoGrafica 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("graficar",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listaSentenciasBar ::= listaSentenciasBar sentenciasBar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasBar",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // listaSentenciasBar ::= sentenciasBar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaSentenciasBar",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipoGrafica ::= RGRAPHBAR PARIZQ listaSentenciasBar REXEC RGRAPHBAR REND PYC PARDER REND PYC 
            {
              Object RESULT =null;
		
                System.out.println("Grafica de barras");
                System.out.println("Titulo: " + main.Main.sentenciasGraph.get("titulo"));
                System.out.println("Eje X: " + main.Main.sentenciasGraph.get("ejeX"));
                System.out.println("Eje Y: " + main.Main.sentenciasGraph.get("ejeY"));
                System.out.println("Titulo X: " + main.Main.sentenciasGraph.get("tituloX"));
                System.out.println("Titulo Y: " + main.Main.sentenciasGraph.get("tituloY"));
                utilities.Instruction.graficarBarra();

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoGrafica",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tipoGrafica ::= RGRAPHPIE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoGrafica",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tipoGrafica ::= RGRAPHLINE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoGrafica",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tipoGrafica ::= RHISTOGRAM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoGrafica",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentenciasBar ::= RTITULO DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion REND PYC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                 main.Main.sentenciasGraph.put("titulo",exp.toString());
 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasBar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentenciasBar ::= REJEX DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion REND PYC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 main.Main.sentenciasGraph.put("ejeX",exp.toString());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasBar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentenciasBar ::= REJEY DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion REND PYC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 main.Main.sentenciasGraph.put("ejeY",exp.toString());;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasBar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentenciasBar ::= RTITULOX DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion REND PYC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 main.Main.sentenciasGraph.put("tituloX",exp.toString());;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasBar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // sentenciasBar ::= RTITULOY DOSPUNTOS DOSPUNTOS tipoDato IGUAL expresion REND PYC 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 main.Main.sentenciasGraph.put("tituloY",exp.toString());;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentenciasBar",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // print ::= RCONSOLE DOSPUNTOS DOSPUNTOS tipoPrint REND PYC 
            {
              Object RESULT =null;
		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("print",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tipoPrint ::= RPRINT IGUAL printlist 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 utilities.Instruction.print(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoPrint",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipoPrint ::= RCOLUMN IGUAL expresion MENOS MAYOR expresion 
            {
              Object RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object exp1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 utilities.Instruction.printArray(exp1.toString(),exp2.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoPrint",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // printlist ::= printlist COMA expresion 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = izq.toString() + ", " + der.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printlist",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // printlist ::= expresion 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printlist",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declararVariable ::= RVAR DOSPUNTOS tipoDato DOSPUNTOS DOSPUNTOS ID MENOR MENOS expresion REND PYC 
            {
              Object RESULT =null;
		int reservadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int reservadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		String reservada = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
           main.Main.tablaSimbolos.put(var.toString(),
                           new utilities.Variable(var.toString(), tipo.toString(),val.toString(),reservadaright,reservadaleft));
                           System.out.println("Variable declarada: " + var.toString() + " - Tipo: " + tipo.toString() + " - Valor: " + val.toString());
                           System.out.println("Fila: " + reservadaright + " - Columna: " + reservadaleft);


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararVariable",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declararArreglo ::= RARRAY DOSPUNTOS tipoDato DOSPUNTOS DOSPUNTOS IDARRAY MENOR MENOS CORCHIZQ listaArray CORCHDER REND PYC 
            {
              Object RESULT =null;
		int reservadaleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int reservadaright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		String reservada = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		

main.Main.tablaSimbolos.put(id.toString(),
 new utilities.Variable(id.toString(), tipo.toString(),val.toString(),reservadaright,reservadaleft));


              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declararArreglo",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // listaArray ::= listaArray COMA expresion 
            {
              Object RESULT =null;
		int listaexpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listaexpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object listaexp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                                                        LinkedList<String> lista = (LinkedList<String>) listaexp;
                                                        lista.add(exp.toString());
                                                        RESULT = lista;
                                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaArray",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listaArray ::= expresion 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                              LinkedList<String> lista = new LinkedList<>();
                                                             lista.add(exp.toString());
                                                             RESULT = lista;
                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("listaArray",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // tipoDato ::= RCHAR CORCHIZQ CORCHDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // tipoDato ::= RDOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipoDato",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion ::= DOUBLE 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresion ::= CADENA 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = val.toString(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresion ::= ID 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

           utilities.Variable variable = main.Main.tablaSimbolos.get(val.toString());
            if (variable != null) {
            RESULT = variable.obtenerValor();
            }
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresion ::= IDARRAY 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = val.toString();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresion ::= RSUM PARIZQ expresion COMA expresion PARDER 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Suma(izq.toString(),der.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresion ::= RMUL PARIZQ expresion COMA expresion PARDER 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Multiplicacion(izq.toString(),der.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresion ::= RDIV PARIZQ expresion COMA expresion PARDER 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Division(izq.toString(),der.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresion ::= RRES PARIZQ expresion COMA expresion PARDER 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Resta(izq.toString(),der.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresion ::= RMOD PARIZQ expresion COMA expresion PARDER 
            {
              Object RESULT =null;
		int izqleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int izqright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object izq = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int derleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int derright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object der = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Modulo(izq.toString(),der.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= RMEDIA PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Media(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= CORCHIZQ printlist CORCHDER 
            {
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = "[" + val.toString() + "]"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= RMAX PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Max(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= RMIN PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Min(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresion ::= RMEDIANA PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Mediana(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresion ::= RMODA PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Moda(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresion ::= RVARIANZA PARIZQ expresion PARDER 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = utilities.Expression.Varianza(exp.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expresion",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
